generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// We could not retrieve columns for the underlying table. Either it has none or you are missing rights to see them. Please check your privileges.
// model prisma {
// }

model Profile {
  id                      Int                        @id @default(autoincrement())
  userId                  String                     @unique
  entries                 Entry[]
  legacyAccounts          LegacyAccount[]
  legacyProfileCategories LegacyProfilesCategories[]
}

model Currency {
  id                 Int                 @id @default(autoincrement())
  precision          Int                 @default(2)
  symbol             String              @db.VarChar(10)
  code               String              @db.Char(3)
  decimal            String              @default(".") @db.Char(1)
  separator          String              @default(",") @db.Char(1)
  legacyTransactions LegacyTransaction[]
  transaction        Transaction[]
}

model Tag {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  label        String        @unique
  transactions Transaction[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String
  units       Int      @default(0)
  cents       Int      @default(0)
  currency    Currency @relation(fields: [currencyId], references: [id])
  currencyId  Int
  date        DateTime
  repeat      Boolean?
  periodicity String?
  on          Int? // 1 - 31
  at          String? // 'begin' | 'end'
  tags        Tag[]
}

// Legacy
model LegacyTransaction {
  id         Int            @id @default(autoincrement())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  units      Int
  cents      Int
  currency   Currency       @relation(fields: [currencyId], references: [id])
  currencyId Int
  entry      Entry?
  account    LegacyAccount?
}

model Entry {
  id            Int               @id @default(autoincrement())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  description   String?           @db.VarChar(255)
  transaction   LegacyTransaction @relation(fields: [transactionId], references: [id])
  transactionId Int               @unique
  date          DateTime          @db.Date
  type          EntryType?        @relation(fields: [typeId], references: [id])
  typeId        Int
  account       LegacyAccount?    @relation(fields: [accountId], references: [id])
  accountId     Int?
  category      LegacyCategory?   @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  profile       Profile?          @relation(fields: [profileId], references: [id])
  profileId     Int
  tag           LegacyTag?        @relation(fields: [tagId], references: [id])
  tagId         Int?
}

model EntryType {
  id      Int     @id @default(autoincrement())
  name    String  @unique @db.VarChar(25)
  entries Entry[]

  @@map("AccountType")
}

model LegacyAccount {
  id            Int               @id @default(autoincrement())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  name          String            @db.VarChar(255)
  transaction   LegacyTransaction @relation(fields: [transactionId], references: [id])
  transactionId Int               @unique
  entries       Entry[]
  profile       Profile           @relation(fields: [profileId], references: [id])
  profileId     Int
}

model LegacyCategory {
  id                Int                        @id @default(autoincrement())
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  name              String                     @db.VarChar(255)
  entries           Entry[]
  profileCategories LegacyProfilesCategories[]
}

model LegacyProfilesCategories {
  profile    Profile?        @relation(fields: [profileId], references: [id])
  profileId  Int
  category   LegacyCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([profileId, categoryId], name: "profileCategoryId")
  @@map("ProfilesCategories")
}

model LegacyTag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  entries   Entry[]
}
